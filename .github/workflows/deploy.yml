################################################################################
# deploy.yml
# GitHub Actions Workflow for deploying phamt to PyPI.
# by Noah C. Benson

name: Deploy

# We run on eithe pushes or pulls into main
on:
  # We only run this manually.
  workflow_dispatch:

jobs:
  deploy-source:
    name: Build & Deploy Source Distribution
    runs-on: ubuntu-latest
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
    steps:
      # Check out the repository (goes to $GITHUB_WORKSPACE)
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: '2'
      # Setup the Python Environment.
      - name: Setup Python Environment
        uses: actions/setup-python@v3
        with:
          python-version: 3
          architecture: x64
      - name: Install Twine
        run: |
          pip install twine
      # Run the actual tests.
      - name: Run Tests
        run: |
          python setup.py build
          python setup.py install
          cd ~
          python -m unittest phamt.test
      - name: Build and Upload Source Distribution
        run: |
          rm dist/*
          python setup.py sdist
          twine upload -r testpypi dist/phamt-*.*.[^.].tar.gz
  deploy-nonlinux:
    name: Build & Deploy ${{matrix.os}}, ${{matrix.version}}, ${{matrix.arch}}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        version:
          - '3.6'
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
        os:
          - windows-latest
          - macos-latest
        arch:
          - 'x64'
        include:
          - {"os":"windows-latest", "arch":"x86", "version":"3.6"}
          - {"os":"windows-latest", "arch":"x86", "version":"3.7"}
          - {"os":"windows-latest", "arch":"x86", "version":"3.8"}
          - {"os":"windows-latest", "arch":"x86", "version":"3.9"}
          - {"os":"windows-latest", "arch":"x86", "version":"3.10"}
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: '2'
      - name: Setup Python Environment
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.version }}
          architecture: ${{ matrix.arch }}
      - name: Install Twine
        run: |
          pip install twine
      - name: Install Wheel
        if: matrix.type == 'b'
        run: |
          pip install wheel
      - name: Run Tests
        run: |
          python setup.py build
          python setup.py install
          cd ~
          python -m unittest phamt.test
      - name: Build Binary Distribution
        run: |
          rm dist/*
          python setup.py bdist_wheel
      - name: Upload Binary Distribution
        run: |
          twine upload -r testpypi dist/*.whl
  deploy-linux:
    name: Build & Deploy Linux Binaries 
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        includes:
          - arch: x86_64
            docker: docker://quay.io/pypa/manylinux_2_24_x86_64
          - arch: i686
            docker: docker://quay.io/pypa/manylinux_2_24_i686
          - arch: aarch64
            docker: docker://quay.io/pypa/manylinux_2_24_aarch64
          - arch: ppc64le
            docker: docker://quay.io/pypa/manylinux_2_24_ppc64le
          - arch: s390x
            docker: docker://quay.io/pypa/manylinux_2_24_s390x
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
    steps:
      # Check out the repository (goes to $GITHUB_WORKSPACE)
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: '2'
      - name: Setup Python Environment
        uses: actions/setup-python@v3
        with:
          python-version: 3
          architecture: x64
      - name: Install Twine
        run: |
          pip install twine
      - name: Build Wheels
        uses: ${{ matrix.docker }}
        with:
          volumes: ${{github.workspace}}:/work
          args: bash /work/build-wheels.sh ${{matrix.arch}}
      - name: Upload Binary Distribution
        run: |
          twine upload -r testpypi wheels/*.whl
